import os
from decouple import config
from pathlib import Path
import cloudinary
import cloudinary.uploader
import cloudinary.api


"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# Hosts
PROD_HOST = config('PROD_HOST', default='https://nikescateringservices.com').rstrip('/')
LOCAL_HOST = config('LOCAL_HOST', default='http://localhost:8000').rstrip('/')


# Environment (dev/prod)
ENVIRONMENT = config('DJANGO_ENV', default='dev')  # 'prod' or 'dev'
DEBUG = ENVIRONMENT != 'prod'

# Base URL to be used in templates and static/media settings
BASE_URL = PROD_HOST if ENVIRONMENT == 'prod' else LOCAL_HOST

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'django-insecure-^j__tk^0+jp^cu^p%uyxpb-s6o^#=&!tty-9!g*9n&di_n#0jf'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-l(y@)op3+!yl^6fy^i&atbc1&54bi!v&9eidoy+ddq2d#k@_l7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    PROD_HOST.replace('https://', '').replace('http://', ''),
    f"www.{PROD_HOST.replace('https://', '').replace('http://', '')}",
    'localhost',
    '127.0.0.1',
    'soireeweb.onrender.com',
    "soiree-experimental.onrender.com",
    'www.nikescateringservices.com',
    'nikescateringservices.com',
]

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

STATICFILES_DIRS = [BASE_DIR / 'main' / 'static', 
    BASE_DIR / "static",
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'corsheaders',
    'django.contrib.staticfiles',
    'fuzzywuzzy',
    'cloudinary_storage',
    'cloudinary',
    'main',
    'channels',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'config.middleware.BypassRefererCheckMiddleware',
    'config.middleware.RedirectToWwwMiddleware',
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'main' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'main.context_processor.global_settings',
                
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Use in-memory channel layer (no Redis)
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    }
}

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# PostgreSQL for both development and production
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('PG_DB'),
        'USER': config('PG_USER'),
        'PASSWORD': config('PG_PASS'),
        'HOST': config('PG_HOST'),
        'PORT': config('PG_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# DeepAI API Configuration
DEEPAI_API_KEY = 'c6ea7310-add9-441d-9a53-019f2f12da1f'  # Replace with your actual DeepAI API key

# OpenAI API Configuration
OPENAI_API_KEY = config('OPENAI_API_KEY')

ASGI_APPLICATION = "config.asgi.application"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'main.User'

CSRF_TRUSTED_ORIGINS = [
    BASE_URL,
    "http://localhost:19006",
    "http://127.0.0.1:3000",
    "https://soireeweb.onrender.com",
    "https://nikescateringservices.com", # Domain
    "https://www.nikescateringservices.com",
    "https://soiree-experimental.onrender.com"# Domain
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:19006",
    "http://127.0.0.1:3000",
    "https://soireeweb.onrender.com",
    "https://nikescateringservices.com", # Domain
    "https://www.nikescateringservices.com",
    "https://soiree-experimental.onrender.com"# Domain
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Cache Configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    }
}

LOGIN_URL = '/login/'

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/login/'

# MEDIA_URL = '/media/'



# Configure Cloudinary for both development and production
cloudinary.config( 
    cloud_name = config('CLOUDINARY_CLOUD_NAME'), 
    api_key = config('CLOUDINARY_API_KEY'), 
    api_secret = config('CLOUDINARY_API_SECRET'), # Click 'View API Keys' above to copy your API secret
    secure=True
)

if ENVIRONMENT == 'prod':
    DEFAULT_FILE_STORAGE = "cloudinary_storage.storage.MediaCloudinaryStorage"
    # MEDIA_URL = f"/"  # optional: Cloudinary will auto-handle
    # MEDIA_URL = f"https://res.cloudinary.com/{config('CLOUDINARY_CLOUD_NAME')}/"
else:
    MEDIA_ROOT = os.path.join(BASE_DIR, "media")
    MEDIA_URL = "/media/"


# SECURE_SSL_REDIRECT = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True


# If needed
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = DEBUG  # Allow all origins in development
CORS_ALLOWED_ORIGINS = CSRF_TRUSTED_ORIGINS
CORS_ALLOW_CREDENTIALS = True

# Email Configuration - Optimized for Render
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'

# Use SSL (port 465) instead of TLS (port 587) for better Render compatibility
EMAIL_PORT = 465 if ENVIRONMENT == 'prod' else 587
EMAIL_USE_TLS = False if ENVIRONMENT == 'prod' else True
EMAIL_USE_SSL = True if ENVIRONMENT == 'prod' else False
EMAIL_TIMEOUT = 60 if ENVIRONMENT == 'prod' else 30  # Longer timeout for production

# Robust email password handling - Enhanced for Render auto-quoting
def get_clean_email_password():
    """
    Clean Gmail app password that Render auto-wraps in quotes due to spaces
    
    Gmail provides: "abcd efgh ijkl mnop" (with spaces)
    Render stores as: "abcd efgh ijkl mnop" (auto-quoted due to spaces)
    We need: "abcdefghijklmnop" (no quotes, no spaces)
    """
    password = config('EMAIL_HOST_PASSWORD', default='')
    if not password:
        return ''
    
    # Remove surrounding quotes and whitespace
    password = password.strip()
    
    # CRITICAL: Handle Render auto-quoting due to spaces in Gmail app password
    # Render automatically adds quotes around env vars with spaces
    if password.startswith('"') and password.endswith('"'):
        password = password[1:-1]  # Remove Render's auto-added quotes
    
    # Handle single quotes (just in case)
    if password.startswith("'") and password.endswith("'"):
        password = password[1:-1]
    
    # CRITICAL INSIGHT: Gmail SMTP accepts passwords WITH spaces (works in localhost)
    # The REAL issue: Render auto-quotes env vars with spaces, Gmail rejects quoted passwords
    # Solution: Remove ONLY the quotes that Render adds, keep the spaces!
    
    # Don't remove spaces - Gmail accepts them! Only remove quotes.
    # Final cleanup
    password = password.strip()
    
    # Gmail app passwords should be exactly 19 characters with spaces (xxxx xxxx xxxx xxxx)
    # or 16 characters without spaces (if user manually removed them)
    if len(password) not in [16, 19]:
        import logging
        logger = logging.getLogger(__name__)
        logger.warning(f"Gmail app password length is {len(password)}, expected 19 (with spaces) or 16 (without spaces)")
    
    return password

EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = get_clean_email_password()
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default=EMAIL_HOST_USER)

# Log email configuration status (only in debug mode)
if DEBUG:
    print(f"Email configuration loaded:")
    print(f"  EMAIL_HOST_USER: {EMAIL_HOST_USER}")
    print(f"  EMAIL_HOST_PASSWORD: {'*' * len(EMAIL_HOST_PASSWORD) if EMAIL_HOST_PASSWORD else 'NOT SET'}")
    print(f"  DEFAULT_FROM_EMAIL: {DEFAULT_FROM_EMAIL}")